// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © iamlilun


//@version=5
indicator(title='vegas改', shorttitle='vegas改', overlay=true, max_labels_count=500)


///
/// show debug data label
///
dCross = input.bool(defval=false, title="標示均線交叉", group="Debug")
dEMA48 = input.bool(defval=false, title="標示4倍EMA12", group="Debug")
dDojiShort = input.bool(defval=false, title="標示十字星.短實體", group="Debug")
dBackTunnel = input.bool(defval=false, title="標示回踩通道", group="Debug")
dBackEMA12 = input.bool(defval=false, title="標示返回EMA12", group="Debug")
dProfitPercent = input.bool(defval=false, title="標示獲利停損%", group="Debug")

/// -------------------------------------------
/// 準備均線數據..
/// ema12 ema144 ema169 ema288 ema338 ema576 ema676
/// ------------------------------------------

//ema12 過濾線
len12 = input.int(12, minval=1, title='Length')
src12 = input(close, title='Source')
offset12 = input.int(title='Offset', defval=0, minval=-500, maxval=500)
ema12 = ta.ema(src12, len12)
plot(ema12, title='EMA12', color=color.new(color.red, 0), offset=offset12)

//
// 基於4倍不逆市..把12MA的4倍也拉進來
// 12 * 4 = 48
// 144 * 4 = 576
// 169 * 4 = 676
// 4倍时間換算
// fourTimes = str.tostring(str.tonumber(timeframe.period) * 4) 
// 趕羚羊.轉出來的類型是series string, request.security().不吃..
// 只好苦工switch..
string fourTimes = switch timeframe.period
	//15 min * 4
	"15" => "60"
	//1 hour = 60 min * 4
	"60" => "240"
	//4 hour = 240 min * 4
	"240" => "960"
	//1 day = D * 4
	"D" => "4D"
	//1 month = M * 4
	"M" => "4M"
	//default
	=> "60"

// 邏輯驗證過後就可以設為透明來隱藏
ema48 = request.security(syminfo.tickerid, fourTimes, expression=ema12) 
plot(ema48, title='EMA48', color=color.new(#FF0088, dEMA48 ? 0 : 100), offset=offset12, style=plot.style_line) //pink

//ema144, 169 短期線
len144 = input.int(144, minval=1, title='Length')
src144 = input(close, title='Source')
offset144 = input.int(title='Offset', defval=0, minval=-500, maxval=500)
ema144 = ta.ema(src144, len144)
plot(ema144, title='EMA144', color=color.new(color.orange, 0), offset=offset144)

len169 = input.int(169, minval=1, title='Length')
src169 = input(close, title='Source')
offset169 = input.int(title='Offset', defval=0, minval=-500, maxval=500)
ema169 = ta.ema(src169, len169)
plot(ema169, title='EMA169', color=color.new(color.orange, 0), offset=offset169)

//ema288, 338 中期線
len288 = input.int(288, minval=1, title='Length')
src288 = input(close, title='Source')
offset288 = input.int(title='Offset', defval=0, minval=-500, maxval=500)
ema288 = ta.ema(src288, len288)
plot(ema288, title='EMA288', color=color.new(color.white, 0), offset=offset288)

len338 = input.int(338, minval=1, title='Length')
src338 = input(close, title='Source')
offset338 = input.int(title='Offset', defval=0, minval=-500, maxval=500)
ema338 = ta.ema(src338, len338)
plot(ema338, title='EMA338', color=color.new(color.white, 0), offset=offset338)

//ema576, 676 長期線
len576 = input.int(576, minval=1, title='Length')
src576 = input(close, title='Source')
offset576 = input.int(title='Offset', defval=0, minval=-500, maxval=500)
ema576 = ta.ema(src576, len576)
plot(ema576, title='EMA576', color=color.new(color.lime, 0), offset=offset576)

len676 = input.int(676, minval=1, title='Length')
src676 = input(close, title='Source')
offset676 = input.int(title='Offset', defval=0, minval=-500, maxval=500)
ema676 = ta.ema(src676, len676)
plot(ema676, title='EMA676', color=color.new(color.lime, 0), offset=offset676)

/// --------------------------------------
/// 進出場邏輯
/// --------------------------------------
///
/// 做多條件:
///	 	1. EMA48金叉突破 576,676
/// 	2. EMA12金叉突破 144,169
/// 	3. 陰線實體..開盤低於ema12.
///     4. K線最低價回踩 144,169 (距離2%內就算回踩)
/// 	5. K線開盤和收盤要高於ema12
/// 止盈止損:
///		K線收盤低於ema576,676 (相當於1小時的ema144,169) 
/// --------------------------------------
/// 做空條件:
/// 	1. 48EMA死叉跌破 576,676
/// 	2. 12EMA死叉跌破 144,169
///	    3. 陽線實體..開盤高於ema12.
///     4. K線最高價回彈 144,169 (距離2%內就算回彈)
/// 	5. K線開盤和收盤要低於ema12
/// 止盈止損:
///		K線收盤高於ema576,676 (相當於1小時的ema144,169) 
/// --------------------------------------

///------ variables --------------

// 均線交叉記錄
// key: 0 => ema144, 1 => ema169, 2 => ema576, 3 => ema676 
// value: 0 => initial, 1 => 金叉, 2 => 死叉
var lineCross = array.new_int(4, 0)

// 回踩通道記錄
// key: 只有一個..但用array才能copy出來做判斷..如果只用變數會造成判斷污染
// value: 0 => initial, 1 => 多單回踩, 2 => 空單回踩, 3 => 免判斷直接多單, 4 => 免判斷直接空單
var backTunnel = array.new_int(1, 0)

// K線返回12EMA記錄
// key: 0 => 多單記錄位置, 1 => 空單記錄位置
// value: 0 => initial, 1 => 正常線形, 2 => 十字星, 3 => 短實體, 4 => 下單條件達成
var back12EMA = array.new_int(2, 0)

// 最後一筆持倉記錄
// key: 只有一個..但用array才能copy出來做判斷..如果只用變數會造成判斷污染
// value: 0 => initial, 1 => 多單, 2 => 空單
var lastPosition = array.new_int(1, 0)

// 當點持倉記錄
// key: 0 => 持倉類型, 1 => 持倉bar_index, 2 => 止盈止損percent 
// value: 0 => initial, 1 => 多單, 2 => 空單
var position = array.new_int(3, 0)

// 下單價格
var float orderPrice = 0

// 止盈百分比
profitPercent = input.int(defval=3, minval=1, title='基本止盈百分比', group='止盈設定')

// 累進百分比
progPercent = input.int(defval=5, minval=1, title='累進百分比', group='止盈設定')

///---- functions -------------

///
/// 計算兩個數的差異百分比
/// @returns {float}: 差異百分比
///
calcPercent(num1, num2) =>
	pec = ((num1 - num2) / num2 ) * 100
    pec

///
/// 檢查K線是否為十字星
/// ref: 內建指標->十字星
/// @returns {boolean}: true => 十字星, false => 非十字星 
///
checkIsDoji() =>
	C_ShadowPercent = 5.0 // size of shadows
	C_ShadowEqualsPercent = 100.0
	C_DojiBodyPercent = 5.0
	C_BodyHi = math.max(close, open)
	C_BodyLo = math.min(close, open)
	C_Body = C_BodyHi - C_BodyLo
	C_UpShadow = high - C_BodyHi
	C_DnShadow = C_BodyLo - low
	C_HasUpShadow = C_UpShadow > C_ShadowPercent / 100 * C_Body
	C_HasDnShadow = C_DnShadow > C_ShadowPercent / 100 * C_Body
	C_Range = high-low
	C_BodyMiddle = C_Body / 2 + C_BodyLo
	C_ShadowEquals = C_UpShadow == C_DnShadow or (math.abs(C_UpShadow - C_DnShadow) / C_DnShadow * 100) < C_ShadowEqualsPercent and (math.abs(C_DnShadow - C_UpShadow) / C_UpShadow * 100) < C_ShadowEqualsPercent
	C_IsDojiBody = C_Range > 0 and C_Body <= C_Range * C_DojiBodyPercent / 100
	C_Doji = C_IsDojiBody and C_ShadowEquals

	C_DragonflyDoji = C_IsDojiBody and C_UpShadow <= C_Body
	C_GravestoneDojiOne = C_IsDojiBody and C_DnShadow <= C_Body

	isDoji = C_Doji and not C_DragonflyDoji and not C_GravestoneDojiOne	
	isDoji

///
/// 檢查K線是否為短實體
/// @returns {boolean}: true => 短實體, false => 非短實體
///
checkIsShortBody() =>
	C_BodyHi = math.max(close, open) 
	C_BodyLo = math.min(close, open)
	isShort = math.abs(calcPercent(C_BodyHi, C_BodyLo)) <= 0.2
	isShort

///
/// 確定K線最低價回踩 144,169 (距離2%內就算回踩)
/// @retruns {number}: 0 => 沒回踩, 1 => 多單回踩, 2 => 空單回踩 
///
checkBackTunnel() =>
	gold144 = array.get(lineCross, 0)
	gold169 = array.get(lineCross, 1)
	gold576 = array.get(lineCross, 2)
	gold676 = array.get(lineCross, 3)

	lastPos = array.get(lastPosition, 0)
	pos = array.get(position, 0)
	back = array.get(backTunnel, 0)
	
	//多單回踩邏輯
	if gold144 == 1 and gold169 == 1 and lastPos == 1 and pos != 1
		//上一筆資料持有多單且手上沒有多單(已出場)..15分金叉直接下單
		back := 3
	else if gold144 == 1 and gold576 == 1 and gold169 == 1 and gold676 == 1 and back != 1
		//1倍跟4倍均線都金叉..還沒有K線回踩通道的記錄.
		if open < ema12 and close < open
			//..陰線實體開盤低於ema12
			if(ema144 > ema169) 
				//ema144在上..計算K線最低價距離ema144的百分比
				pec = calcPercent(low, ema144)
				if (math.abs(pec) < 2) or (low <= ema144)
					label.new(dBackTunnel ? bar_index : na, high + 100, text="多回踩" + str.tostring(pec) + "%", color=#005757, textcolor=color.white)
					back := 1 
			else
				//ema169在上..計算K線最低價距離ema169的百分比
				pec = calcPercent(low, ema169)
				// label.new(bar_index, high + 100, text=str.tostring(pec))
				if (math.abs(pec) < 2) or (low <= ema169)
					label.new(dBackTunnel ? bar_index : na, high + 100, text="多回踩" + str.tostring(pec) + "%", color=#005757, textcolor=color.white)
					back := 1
		
	//空單回踩邏輯
	if gold144 == 2 and gold169 == 2 and lastPos == 2 and pos != 2
		//上一筆資料持有空單且手上沒有空單(已出場).15分死叉直接下單
		back := 4
	else if gold144 == 2 and gold576 == 2 and gold169 == 2 and gold676 == 2 and back != 2
		//1倍跟4倍均線都死叉.且還沒有K線回踩通道的記錄
		if open > ema12 and close > open
			//陽線實體開盤高於ema12
			if(ema144 > ema169) 
				//ema169在下.計算K線最高價距離ema169的百分比
				pec = calcPercent(high, ema169)
				if (math.abs(pec) < 2) or (high >= ema169)
					label.new(dBackTunnel ? bar_index : na, low - 100, text="空回彈" + str.tostring(pec) + "%", color=#600030, textcolor=color.white, style=label.style_label_up)
					back := 2 
			else
				//ema144在下.計算K線最高價距離ema144的百分比
				pec = calcPercent(high, ema144)
				if (math.abs(pec) < 2) or (high >= ema144)
					label.new(dBackTunnel ? bar_index : na, low - 100, text="空回彈" + str.tostring(pec) + "%", color=#600030, textcolor=color.white, style=label.style_label_up)
					back := 2

	array.set(backTunnel, 0, back) //結果寫入陣列

	back

///
/// 確定K線回到EMA12
/// @returns {number}: 0 => 沒回踩, 1 => 多單回踩, 2 => 空單回踩
///
checkBarBackEma12() =>
	order = array.get(backTunnel, 0)
	// key: 0 => 多單記錄位置, 1 => 空單記錄位置
	// value: 0 => initial, 1 => 正常線形, 2 => 十字星, 3 => 短實體, 4 => 下單條件達成
	// var back12EMA = array.new_int(2, 0)
	back = 0
	if order == 1
		//多單判斷
		status = array.get(back12EMA, 0)
		back := switch status
			//0代表第一次判斷..
			0 => 
				res = open > ema12 and close > ema12 ? 1 : status
				if res == 1
					label.new(dBackEMA12 ? bar_index : na, high + 50, text="第1根", color=#02DF82, textcolor=color.white)
				res
			//1代表正常線型返回ema12..判斷是否是十字星還是短實體.如果是正常線形就滿足下單條件
			1 => 
				if open >= ema12 and close >= ema12
					res = checkIsDoji() ? 2 :
					   checkIsShortBody() ? 3 : 4

					msg = switch res
						2 => '十字星'
						3 => '短實體'
						4 => '第2根'
					label.new(dBackEMA12 ? bar_index : na, high + 50, text=msg, color=#02DF82, textcolor=color.white)
					res
			//3代表是十字星..判斷收盤價是否高於前一根
			2 => 
				res = close > close[1] ? 4 : 1
				msg = switch res
					1 => '重新判斷'
					4 => '第2根'
				label.new(dBackEMA12 ? bar_index : na, high + 50, text=msg, color=#02DF82, textcolor=color.white)
				res
			3 => 
				res = close > ema12 ? 4 : 1
				msg = switch res
					1 => '重新判斷'
					4 => '第2根'
				label.new(dBackEMA12 ? bar_index : na, high + 50, text=msg, color=#02DF82, textcolor=color.white)
				res

			=> status

		array.set(back12EMA, 0, back) //結果寫入陣列

	if order == 2
		//空單判斷
		status = array.get(back12EMA, 1)
		back := switch status
			//0代表第一次判斷..
			0 => 
				res = open < ema12 and close < ema12 ? 1 : status
				if res == 1
					label.new(dBackEMA12 ? bar_index : na, low - 50, text="第1根", color=#EA0000, textcolor=color.white, style=label.style_label_up)
				res
			//1代表正常線型返回ema12..判斷是否是十字星還是短實體.如果是正常線形就滿足下單條件
			1 => 
				if open <= ema12 and close <= ema12
					res = checkIsDoji() ? 2 :
					   checkIsShortBody() ? 3 : 4
					
					msg = switch res
						2 => '十字星'
						3 => '短實體'
						4 => '第2根'

					label.new(dBackEMA12 ? bar_index : na, low - 50, text=msg, color=#EA0000, textcolor=color.white, style=label.style_label_up)
					res
			//3代表是十字星..判斷收盤價是否低於前一根
			2 => 
				res = close < close[1] ? 4 : 1
				msg = switch res
					1 => '重新判斷'
					4 => '第2根'
				label.new(dBackEMA12 ? bar_index : na, low - 50, text=msg, color=#EA0000, textcolor=color.white, style=label.style_label_up)
				res
			//4代表短實體..判斷收盤價是否低於ema12
			3 => 
				res = close < ema12 ? 4 : 1
				msg = switch res
					1 => '重新判斷'
					4 => '第2根'
				label.new(dBackEMA12 ? bar_index : na, low - 50, text=msg, color=#EA0000, textcolor=color.white, style=label.style_label_up)
				res
			=> status

		array.set(back12EMA, 1, back) //結果寫入陣列
	
	back

		

///
/// 判斷是否滿足下單條件..
/// @returns {number}: 0 => 未滿足, 1 => 多單, 2空單
/// 
///
verifyOrder() =>
	order = array.get(backTunnel, 0)
	res = switch order
		1 => array.get(back12EMA, 0) == 4 ? 1 : 0
		2 => array.get(back12EMA, 1) == 4 ? 2 : 0
		3 => 3
		4 => 4
		=> 0

	if res > 0
	// 下單條件滿足..清空條件讓下一筆資料重新判斷
		for i = 0 to 3
			array.set(lineCross, i, 0)
			if i < 2
				array.set(back12EMA, i, 0)
		array.set(backTunnel, 0, 0)
		array.set(position, 2, 0)
	res

///
/// 判斷收盤價是否在通道均線的上或下..
/// @param {number}: 1 均線以上, 0 均線以下  
/// @returns {boolean}: true 是, false 否 
///
checkCrossLine(status) =>
	res = false
	if status == 0
		if ema576 > ema676
			//ema676在下..如果K棒收盤跌破了676就是true
			res := barstate.isconfirmed and close < ema676 ? true : false
		else
			//ema576在下..如果K棒收盤跌破了576就是true
			res := barstate.isconfirmed and close < ema576 ? true : false
	if status == 1
		if ema676 > ema576
			//ema676在上..如果K棒收盤突破了676就是true
			res := barstate.isconfirmed and close > ema676 ? true : false
		else
			//ema576在上..如果K棒收盤突破了576就是true
			res := barstate.isconfirmed and close > ema576 ? true : false
	
	res


///
/// 判斷獲利是否達標
/// @param {number} profit: 獲利幅度百分比
/// @param {number} posState: 持倉狀態..1 => 多單, 2 => 空單
/// @returns {boolean}: true => 達標, false => 未達標
///
checkOverProfit(profit, posState) =>
	refPercent = array.get(position, 2) //累計止盈參考點%
	isCrossTunnel = checkCrossLine(posState - 1) //判斷K線是否在通道均線的上方或下方...posState - 1 正好符合參數
	res = false

	if profit > profitPercent
		// 獲利高過基本停利點邏輯
		if refPercent == 0
			//第一次到達基數..記錄已達標..
			array.set(position, 2, progPercent)
			res := false
		
		if profit > refPercent
			//獲利高過累進值..
			addPercent = int(profit - progPercent) + profitPercent
			// msg = 'profit:' + str.tostring(profit) + ', add:' + str.tostring(addPercent) + ', prog:' + str.tostring(progPercent) + ', ref:' + str.tostring(refPercent)
			// label.new(bar_index, high + 10, text='累計%', color=#444444, textcolor=color.white, tooltip=msg)
			if addPercent > refPercent
				//獲利高過累進值.基數就跟著增加
				array.set(position, 2, addPercent)
				res := false
		else if refPercent > 0 and profit <= refPercent
			//破了獲利參考點就出場
			res := true

	else
		// 獲利低於基本停利點邏輯
		if isCrossTunnel
			//破了均線就出場
			res := true
		else if refPercent > 0 and profit < refPercent
			//曾經達標又降回來
			if profit <= 0
				//.歸零且還沒跌破均線就賭看會不會爬回來
				array.set(position, 2, 0) //累計參考點設為0..不然一爬回馬上就會被洗出場..
				res := false
			else
				//破了基本獲利且沒歸零..就出場
				res := true
	res

///
/// 判斷是否要出場
/// returns {number}: 0 => 不出場, 1 => 多單出場, 2 => 空單出場
///
verifyExit() =>
	res = 0
	pos = array.get(position, 0) //當前持倉..1多單 2空單

	if pos == 1
		//持有多單邏輯
		pec = calcPercent(close, orderPrice) //計算當前收盤價跟orderPrice的差異百分比
		// label.new(dProfitPercent ? bar_index : na, high + 10, text=str.tostring(pec), color=#008866, textcolor=color.white)
		res := checkOverProfit(pec, pos) ? 1 : 0 //判斷是否出場
		
	if pos == 2
		//持有空單邏輯
		pec = calcPercent(orderPrice, close) //計算當前收盤價跟orderPrice的差異要分比..注意參數互換了
		// label.new(dProfitPercent ? bar_index : na, high + 10, text=str.tostring(pec), color=#A42D00, textcolor=color.white)
		res := checkOverProfit(pec, pos) ? 2 : 0 //判斷是否出場

	if res > 0 
		//滿足出場條件..就清掉當前持倉記錄
		array.set(position, 0, 0)
		array.set(position, 1, 0)
		array.set(position, 2, 0)

	res

///-------- logic ----------

if ta.crossover(ema12, ema144)
	//ema12金叉突破ema144
	label.new(dCross ? bar_index : na, high + 100, text="144金叉", color=#FFD306)
	array.set(backTunnel, 0, 0)
	array.set(back12EMA, 1, 0)
	array.set(lineCross, 0, 1)

if ta.crossover(ema12, ema169)
	//ema12金叉突破ema169
	label.new(dCross ? bar_index : na, high + 100, text="169金叉", color=#FFD306)
	array.set(backTunnel, 0, 0)
	array.set(back12EMA, 1, 0)
	array.set(lineCross, 1, 1)

if ta.crossover(ema48, ema576)
	//ema48金叉突破ema576
	label.new(dCross ? bar_index : na, high + 100, text="576金叉", color=#FFF0AC)
	array.set(backTunnel, 0, 0)
	array.set(back12EMA, 1, 0)
	array.set(lineCross, 2, 1)

if ta.crossover(ema48, ema676)
	//ema48金叉突破ema676
	label.new(dCross ? bar_index : na, high + 100, text="676金叉", color=#FFF0AC)
	array.set(backTunnel, 0, 0)
	array.set(back12EMA, 1, 0)
	array.set(lineCross, 3, 1)

if ta.crossunder(ema12, ema144)
	//ema12死叉跌破ema144
	label.new(dCross ? bar_index : na, high + 100, text="144死叉", color=#8E8E8E)
	array.set(backTunnel, 0, 0)
	array.set(back12EMA, 0, 0)
	array.set(lineCross, 0, 2)

if ta.crossunder(ema12, ema169)
	//ema12死叉跌破ema169
	label.new(dCross ? bar_index : na, high + 100, text="169死叉", color=#8E8E8E)
	array.set(backTunnel, 0, 0)
	array.set(back12EMA, 0, 0)
	array.set(lineCross, 1, 2)
	
if ta.crossunder(ema48, ema576)
	//ema48死叉跌破ema576
	label.new(dCross ? bar_index : na, high + 100, text="576死叉", color=#D0D0D0)
	array.set(backTunnel, 0, 0)
	array.set(back12EMA, 0, 0)
	array.set(lineCross, 2, 2)

if ta.crossunder(ema48, ema676)
	//ema48死叉跌破ema676.
	label.new(dCross ? bar_index : na, high + 100, text="676死叉", color=#D0D0D0)
	array.set(backTunnel, 0, 0)
	array.set(back12EMA, 0, 0)
	array.set(lineCross, 3, 2)

checkBackTunnel()
checkBarBackEma12()
order = verifyOrder()
if order > 0
	//記錄持倉是多單還空單
	//如果是金死叉直接下單..就清掉資料讓下一筆重新判斷
	array.set(lastPosition, 0, order == 3 or order == 4 ? 0 : order) 
	
	
	array.set(position, 0, order == 3 ? 1 : order == 4 ? 2 : order)//記錄當前持倉是多單還空單
	array.set(position, 1, bar_index) //記錄bar_index
	array.set(position, 2, 0) //歸零止盈參考點

	//記錄下單價位
	orderPrice := close

exit = verifyExit()

///---------------------------
/// 下單標示
///---------------------------
plotshape(order == 1, style=shape.labelup, location=location.belowbar, size=size.normal, text='多單', title='多單', color=#32CD32, textcolor=color.white)
plotshape(order == 2, style=shape.labeldown, location=location.abovebar, size=size.normal, text='空單', title='空單', color=#FF1493, textcolor=color.white)
plotshape(order == 3, style=shape.labelup, location=location.belowbar, size=size.normal, text='金叉多單', title='金叉多單', color=#32CD32, textcolor=color.white)
plotshape(order == 4, style=shape.labeldown, location=location.abovebar, size=size.normal, text='死叉空單', title='死叉空單', color=#FF1493	, textcolor=color.white)

plotshape(exit == 1, style=shape.labelup, location=location.belowbar, size=size.normal, text='多單出場', title='多單出場', color=#616130, textcolor=color.white)
plotshape(exit == 2, style=shape.labeldown, location=location.abovebar, size=size.normal, text='空單出場', title='空單出場', color=#613030, textcolor=color.white)

/// ----------------------
/// 傳送通知
/// ----------------------
alertcondition(order == 1 or order == 3, title='Veges-多單通知', message='Veges 做多囉')
alertcondition(order == 2 or order == 4, title='Veges-空單通知', message='Veges 做空囉')
alertcondition(exit > 0, title='Veges-出場通知', message='Veges 出場囉')