// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © iamlilun


//@version=5
indicator(title='vegas改', shorttitle='vegas改', overlay=true, max_labels_count=500)


//show debug data label
var debug = true

/// -------------------------------------------
/// 準備均線數據..
/// ema12 ema144 ema169 ema288 ema338 ema576 ema676
/// ------------------------------------------

//ema12 過濾線
len12 = input.int(12, minval=1, title='Length')
src12 = input(close, title='Source')
offset12 = input.int(title='Offset', defval=0, minval=-500, maxval=500)
ema12 = ta.ema(src12, len12)
plot(ema12, title='EMA12', color=color.new(color.red, 0), offset=offset12)

//
// 基於4倍不逆市..把12MA的4倍也拉進來
// 12 * 4 = 48
// 144 * 4 = 576
// 169 * 4 = 676
// 
// 4倍时間換算..
// fourTimes = str.tostring(str.tonumber(timeframe.period) * 4) 
// 趕羚羊.轉出來的類型是series string, request.security().不吃..
// 只好苦工switch..
string fourTimes = switch timeframe.period
	//15 min * 4
	"15" => "60"
	//1 hour = 60 min * 4
	"60" => "240"
	//4 hour = 240 min * 4
	"240" => "960"
	//1 day = D * 4
	"D" => "4D"
	//1 month = M * 4
	"M" => "4M"
	//default
	=> "60"

// 邏輯驗證過後就可以設為透明來隱藏
ema48 = request.security(syminfo.tickerid, fourTimes, expression=ema12) 
plot(ema48, title='EMA48', color=color.new(#FF0088, debug ? 0 : 100), offset=offset12, style=plot.style_line) //pink

//ema144, 169 短期線
len144 = input.int(144, minval=1, title='Length')
src144 = input(close, title='Source')
offset144 = input.int(title='Offset', defval=0, minval=-500, maxval=500)
ema144 = ta.ema(src144, len144)
plot(ema144, title='EMA144', color=color.new(color.orange, 0), offset=offset144)

len169 = input.int(169, minval=1, title='Length')
src169 = input(close, title='Source')
offset169 = input.int(title='Offset', defval=0, minval=-500, maxval=500)
ema169 = ta.ema(src169, len169)
plot(ema169, title='EMA169', color=color.new(color.orange, 0), offset=offset169)

//ema288, 338 中期線
len288 = input.int(288, minval=1, title='Length')
src288 = input(close, title='Source')
offset288 = input.int(title='Offset', defval=0, minval=-500, maxval=500)
ema288 = ta.ema(src288, len288)
plot(ema288, title='EMA288', color=color.new(color.white, 0), offset=offset288)

len338 = input.int(338, minval=1, title='Length')
src338 = input(close, title='Source')
offset338 = input.int(title='Offset', defval=0, minval=-500, maxval=500)
ema338 = ta.ema(src338, len338)
plot(ema338, title='EMA338', color=color.new(color.white, 0), offset=offset338)

//ema576, 676 長期線
len576 = input.int(576, minval=1, title='Length')
src576 = input(close, title='Source')
offset576 = input.int(title='Offset', defval=0, minval=-500, maxval=500)
ema576 = ta.ema(src576, len576)
plot(ema576, title='EMA576', color=color.new(color.lime, 0), offset=offset576)

len676 = input.int(676, minval=1, title='Length')
src676 = input(close, title='Source')
offset676 = input.int(title='Offset', defval=0, minval=-500, maxval=500)
ema676 = ta.ema(src676, len676)
plot(ema676, title='EMA676', color=color.new(color.lime, 0), offset=offset676)

/// --------------------------------------
/// 進出場邏輯
/// --------------------------------------
///
/// 做多條件:
///	 	1. EMA48金叉突破 576,676
/// 	2. EMA12金叉突破 144,169
/// 	3. 陰線實體..開盤低於ema12.
///     4. K線最低價回踩 144,169 (距離2%內就算回踩)
/// 	5. K線開盤和收盤要高於ema12
/// 止盈:
///		@TODO
/// 止損:
///		@TODO
///
/// --------------------------------------
/// 做空條件:
/// 	1. 48EMA死叉跌破 576,676
/// 	2. 12EMA死叉跌破 144,169
///	    3. 陽線實體..開盤高於ema12.
///     4. K線最高價回彈 144,169 (距離2%內就算回彈)
/// 	5. K線開盤和收盤要低於ema12
/// 止盈:
///		@TODO
/// 止損:
///		@TODO
/// --------------------------------------

// 均線交叉陣列..
// key: 0 => ema144, 1 => ema169, 2 => ema576, 3 => ema676 
// value: 0 => initial, 1 => 金叉, 2 => 死叉
var lineCross = array.new_int(4, 0)

// 均線回踩通道陣列..
// key: 只有一個..但用array才能copy出來做判斷..如果只用變數會造成判斷污染
// value: 0 => initial, 1 => 多單回踩, 2 => 空單回踩
var lineBack = array.new_int(1, 0)

///
/// 計算兩個數的差異百分比
///
calcPercent(num1, num2) =>
	pec = (math.abs(num1 - num2) / num2 ) * 100
    pec


///
/// 確定K線最低價回踩 144,169 (距離2%內就算回踩)
///
checkBarBackTunnel() =>
	gold144 = array.get(lineCross, 0)
	gold169 = array.get(lineCross, 1)
	gold576 = array.get(lineCross, 2)
	gold676 = array.get(lineCross, 3)

	back = array.get(lineBack, 0)
	
	//多單回踩邏輯
	//1倍跟4倍均線都金叉.且還沒有K線回踩通道的記錄..
	if (gold144 == 1 and gold576 == 1 and gold169 == 1 and gold676 == 1 and back != 1)
		if(open < ema12 and close < open) 
			// 陰線實體開盤低於ema12
			if(ema144 > ema169) 
				//ema144在上..計算K線最低價距離ema144的百分比
				pec = calcPercent(low, ema144)
				if (pec < 2) or (low <= ema144)
					label.new(debug ? bar_index : na, high + 100, text="多回踩" + str.tostring(pec) + "%", color=#01814A, textcolor=color.white)
					back := 1 
			else
				//ema169在上..計算K線最低價距離ema169的百分比
				pec = calcPercent(low, ema169)
				// label.new(bar_index, high + 100, text=str.tostring(pec))
				if (pec < 2) or (low <= ema169)
					label.new(debug ? bar_index : na, high + 100, text="多回踩" + str.tostring(pec) + "%", color=#01814A, textcolor=color.white)
					back := 1
		
	//空單回踩邏輯
	//1倍跟4倍均線都死叉.且還沒有K線回踩通道的記錄.
	if (gold144 == 2 and gold576 == 2 and gold169 == 2 and gold676 == 2 and back != 2)
		if(open > ema12 and close > open) 
			// 陽線實體開盤高於ema12
			if(ema144 > ema169) 
				//ema169在下.計算K線最高價距離ema169的百分比
				pec = calcPercent(high, ema169)
				if (pec < 2) or (high >= ema169)
					label.new(debug ? bar_index : na, low + 100, text="空回彈" + str.tostring(pec) + "%", color=#CE0000, textcolor=color.white)
					back := 2 
			else
				//ema144在下.計算K線最高價距離ema144的百分比
				pec = calcPercent(high, ema144)
				if (pec < 2) or (high >= ema144)
					label.new(debug ? bar_index : na, low + 100, text="空回彈" + str.tostring(pec) + "%", color=#CE0000, textcolor=color.white)
					back := 2

	//return back
	back

///
/// 確定K線回到EMA12
///
checkBarBackEma12() =>
	back = array.get(lineBack, 0)
	res = 0
	
	if (back == 1 and open > ema12 and close > ema12)
		//多單已回踩均線..開盤和收盤要高於ema12
		res := 1

	if (back == 2 and open < ema12 and close < ema12)
		//空單已回踩均線..開盤和收盤要低於ema12
		res := 2

	if res > 0 
		//res > 0 表示下單條件滿足..清空條件讓下一筆資料重新判斷
		for i = 0 to 3
			array.set(lineCross, i, 0)
		
		array.set(lineBack, 0, 0)
	
	//return res
	res


if ta.crossover(ema12, ema144)
	//ema12金叉突破ema144
	label.new(debug ? bar_index : na, high + 100, text="144金叉", color=#FFD306)
	array.set(lineBack, 0, 0)
	array.set(lineCross, 0, 1)

if ta.crossover(ema12, ema169)
	//ema12金叉突破ema169
	label.new(debug ? bar_index : na, high + 100, text="169金叉", color=#FFD306)
	array.set(lineBack, 0, 0)
	array.set(lineCross, 1, 1)

if ta.crossover(ema48, ema576)
	//ema48金叉突破ema576
	label.new(debug ? bar_index : na, high + 100, text="576金叉", color=#FFF0AC)
	array.set(lineBack, 0, 0)
	array.set(lineCross, 2, 1)

if ta.crossover(ema48, ema676)
	//ema48金叉突破ema676
	label.new(debug ? bar_index : na, high + 100, text="676金叉", color=#FFF0AC)
	array.set(lineBack, 0, 0)
	array.set(lineCross, 3, 1)

if ta.crossunder(ema12, ema144)
	//ema12死叉跌破ema144
	label.new(debug ? bar_index : na, high + 100, text="144死叉", color=#8E8E8E)
	array.set(lineBack, 0, 0)
	array.set(lineCross, 0, 2)

if ta.crossunder(ema12, ema169)
	//ema12死叉跌破ema169
	label.new(debug ? bar_index : na, high + 100, text="169死叉", color=#8E8E8E)
	array.set(lineBack, 0, 0)
	array.set(lineCross, 1, 2)
	
if ta.crossunder(ema48, ema576)
	//ema48死叉跌破ema576
	label.new(debug ? bar_index : na, high + 100, text="576死叉", color=#D0D0D0)
	array.set(lineBack, 0, 0)
	array.set(lineCross, 2, 2)

if ta.crossunder(ema48, ema676)
	//ema48死叉跌破ema676.
	label.new(debug ? bar_index : na, high + 100, text="676死叉", color=#D0D0D0)
	array.set(lineBack, 0, 0)
	array.set(lineCross, 3, 2)

array.set(lineBack, 0, checkBarBackTunnel())
order = checkBarBackEma12()

///---------------------------
/// 標示 警告
///---------------------------

plotshape(order == 1, style=shape.labelup, location=location.belowbar, size=size.normal, text='多單', title='多單', color=#32CD32, textcolor=color.white)
plotshape(order == 2, style=shape.labeldown, location=location.abovebar, size=size.normal, text='空單', title='空單', color=#FF1493, textcolor=color.white)

alertcondition(order == 1, title='多', message='做多瞜')
alertcondition(order == 2, title='空', message='做空瞜')


///vages12的邏輯 ===================
// meme = (ema144 > ema169 and ema12[1] < ema144[1] and ema12 >= ema144 and ema12 >= ema169 and ema12[4] < ema169[4]) or (ema144 < ema169 and ema12[1] < ema169[1] and ema12 >= ema144 and ema12 >= ema169 and ema12[4] < ema144[4])
// meme1 = (ema144 > ema169 and ema12[1] > ema169[1] and ema12 <= ema144 and ema12 <= ema169 and ema12[4] > ema144[4]) or (ema144 < ema169 and ema12[1] > ema144[1] and ema12 <= ema144 and ema12 <= ema169 and ema12[4] > ema169[4])

// plotshape(meme, style=shape.labelup, color=color.new(color.green, 0), location=location.belowbar, size=size.small, text='上', textcolor=color.new(color.white, 0), title='上')
// plotshape(meme1, style=shape.labeldown, color=color.new(color.red, 0), location=location.abovebar, size=size.small, text='下', textcolor=color.new(color.white, 0), title='下')

// alertcondition(meme, title='多', message='做多瞜')
// alertcondition(meme1, title='空', message='做空瞜')
